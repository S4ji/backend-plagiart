generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id      String       @id  @default(uuid())
  nom     String       @unique @db.VarChar(64) 

  utilisateurs Utilisateur[] 
}

model Utilisateur {
  id_utilisateur     String       @id @default(uuid())
  nom                String       @db.VarChar(128)
  email              String       @unique
  mot_de_passe       String       @db.VarChar(255)
  roleId             String       @db.VarChar(36)
  rgpd               DateTime
  token              String       @db.VarChar(128)
  isActive           Boolean
  image              String?      @db.VarChar(200)
  biographie         String?      @db.Text        
  style_artistique   String?      @db.VarChar(128)

  created_at         DateTime     @default(now())
  updated_at         DateTime     @updatedAt()

  collections        Collection[] 
  likes              Likes[]     
  signalements       Signalement[]
  role               Role         @relation(fields: [roleId], references: [id]) 
  oeuvres            Oeuvre[]     @relation("UtilisateurOeuvres")
}






model Categorie {
  id_categorie Int       @id @default(autoincrement())
  nom          String    @db.VarChar(128)
  id_parent    Int?      
  path         String?    @db.VarChar(100)

  parent       Categorie? @relation("CategorieParent", fields: [id_parent], references: [id_categorie])
  children     Categorie[] @relation("CategorieParent")
  oeuvres      Oeuvres_Categories[] 
}

model Collection {
  id_collection  Int          @id @default(autoincrement())
  nom            String       @db.VarChar(128)
  description    String?       @db.Text()
  image          String? @db.VarChar(200)
  id_utilisateur String       @db.VarChar(36)
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt()

  utilisateur    Utilisateur @relation(fields: [id_utilisateur], references: [id_utilisateur])
  oeuvres        Oeuvres_Collections[] 
}

model Likes {
  id_like        Int         @id @default(autoincrement())
  id_utilisateur String      
  id_oeuvre      Int

  utilisateur    Utilisateur @relation(fields: [id_utilisateur], references: [id_utilisateur])
  oeuvre         Oeuvre      @relation(fields: [id_oeuvre], references: [id_oeuvre])
}



model Signalement {
  id_signalement  Int          @id @default(autoincrement())
  id_utilisateur  String
  id_oeuvre       Int
  raison          String       @db.Text
  date_signalement DateTime
  statut          StatutSignalement

  utilisateur     Utilisateur  @relation(fields: [id_utilisateur], references: [id_utilisateur])
  oeuvre          Oeuvre       @relation(fields: [id_oeuvre], references: [id_oeuvre])
}

enum StatutSignalement {
  EN_ATTENTE
  TRAITE
  REJETTE
}

model Oeuvre {
  id_oeuvre      Int      @id @default(autoincrement())
  titre          String   @db.VarChar(128)
  description    String   @db.Text
  image          String?  @db.VarChar(200)
  ai_prompt      String   @db.Text              
  id_utilisateur String   @db.VarChar(36)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt()

  artiste        Utilisateur @relation("UtilisateurOeuvres", fields: [id_utilisateur], references: [id_utilisateur])
  likes          Likes[]
  signalements   Signalement[]
  categories     Oeuvres_Categories[]
  collections    Oeuvres_Collections[]
}

model Oeuvres_Collections {
  id_oeuvre    Int
  id_collection Int

  oeuvre       Oeuvre     @relation(fields: [id_oeuvre], references: [id_oeuvre])
  collection   Collection @relation(fields: [id_collection], references: [id_collection])

  @@id([id_oeuvre, id_collection]) 
}

model Oeuvres_Categories {
  id_oeuvre    Int
  id_categorie Int

  oeuvre       Oeuvre     @relation(fields: [id_oeuvre], references: [id_oeuvre])
  categorie    Categorie  @relation(fields: [id_categorie], references: [id_categorie])

  @@id([id_oeuvre, id_categorie]) 
}
